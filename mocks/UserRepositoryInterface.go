// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	entities "todoapi/entities"

	mock "github.com/stretchr/testify/mock"
)

// UserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type UserRepositoryInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: u
func (_m *UserRepositoryInterface) CreateUser(u *entities.User) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.User) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: id
func (_m *UserRepositoryInterface) DeleteUser(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: u
func (_m *UserRepositoryInterface) GetAllUsers(u []*entities.User) ([]*entities.User, error) {
	ret := _m.Called(u)

	var r0 []*entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func([]*entities.User) ([]*entities.User, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func([]*entities.User) []*entities.User); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func([]*entities.User) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *UserRepositoryInterface) GetUserByEmail(email string) (*entities.User, error) {
	ret := _m.Called(email)

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: id
func (_m *UserRepositoryInterface) GetUserByID(id uint64) (*entities.User, error) {
	ret := _m.Called(id)

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIsEmailActive provides a mock function with given fields: U
func (_m *UserRepositoryInterface) UpdateIsEmailActive(U *entities.User) error {
	ret := _m.Called(U)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.User) error); ok {
		r0 = rf(U)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPassword provides a mock function with given fields: u
func (_m *UserRepositoryInterface) UpdateUserPassword(u *entities.User) error {
	ret := _m.Called(u)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.User) error); ok {
		r0 = rf(u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepositoryInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepositoryInterface creates a new instance of UserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepositoryInterface(t mockConstructorTestingTNewUserRepositoryInterface) *UserRepositoryInterface {
	mock := &UserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
